{"version":3,"sources":["serviceWorker.ts","constants/routes.ts","components/Project.tsx","constants/strings.ts","components/Home.tsx","components/Contact.tsx","components/Navigation/TopBar.tsx","components/Navigation/AppRouter.tsx","components/RootComponents/App.tsx","components/RootComponents/DndTools.tsx","index.tsx","components/Navigation/RootRouter.tsx"],"names":["Boolean","window","location","hostname","match","AppRoute","routes","root","home","base","contact","Project","props","react","className","title","description","href","link","target","projects","Home","map","project","Project_Project","Object","assign","key","Contact","_React$useState","React","_React$useState2","slicedToArray","loading","setLoading","spinner","cx","hidden","src","onLoad","TopBar","withRouter","active","pathname","startsWith","navbar","navbarGroup","navbarHeading","navbarDivider","tabs","selectedTabId","onChange","route","history","push","tab","id","Router","TopBar_TopBar","react_router","path","component","App","AppRouter_Router","DndTools","ReactDOM","render","react_default","a","createElement","react_router_dom","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d377231.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const routes = {\r\n  app: {\r\n    root: '/',\r\n    home: {\r\n      base: '/'\r\n    },\r\n    contact: {\r\n      base: '/contact'\r\n    }\r\n  },\r\n  dndTools: {\r\n    root: '/dnd'\r\n  }\r\n};\r\n\r\nexport enum AppRoute {\r\n  Home = '/',\r\n  Contact = '/contact'\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface ProjectProps {\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n}\r\n\r\nexport const Project: React.FC<ProjectProps> = props => {\r\n  return (\r\n    <div className=\"project-wrapper\">\r\n      <h3>{props.title}</h3>\r\n      <p>{props.description}</p>\r\n      <a href={props.link} target=\"_blank\">\r\n        See more\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n","import { ProjectProps } from '../components/Project';\r\n\r\nexport const contactForm =\r\n  'https://docs.google.com/forms/d/e/1FAIpQLScLKJVojwvtY0TpBPYfaUQEhKjQfa2iAZsitp3iRxkEoAYvmw/viewform?embedded=true';\r\n\r\nexport const projects: ProjectProps[] = [\r\n  {\r\n    title: 'Homebrewery Markdown Preview',\r\n    description:\r\n      'An extension for Visual Studio Code that formats the markdown preview in the same manner as the Homebrewery',\r\n    link:\r\n      'https://marketplace.visualstudio.com/items?itemName=officerhalf.homebrewery-vscode'\r\n  }\r\n];\r\n","import * as React from 'react';\r\nimport { Project } from './Project';\r\nimport { projects } from '../constants/strings';\r\nimport '../styles/components/Home.scss';\r\n\r\nexport const Home: React.FC = props => {\r\n  return (\r\n    <div className=\"home-wrapper\">\r\n      <h2>About</h2>\r\n      <p>\r\n        Nathan Smith is an Associate Software Developer at Bentley Systems where\r\n        he writes full-stack enterprise ASP.NET Core and TypeScript + React web\r\n        applications and maintains a CSS + React UI library. In his spare time\r\n        he plays tabletop and video games and takes pictures of his cats.\r\n      </p>\r\n      <h2>Projects</h2>\r\n      {projects.map(project => (\r\n        <Project {...project} key={project.title} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport cx from 'classnames';\r\nimport { Spinner } from '@blueprintjs/core';\r\nimport '../styles/components/Contact.scss';\r\nimport { contactForm } from '../constants/strings';\r\n\r\nexport const Contact: React.FC = props => {\r\n  const [loading, setLoading] = React.useState<boolean>(true);\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div className=\"contact-spinner-wrapper\">\r\n          <Spinner className=\"contact-spinner\" />\r\n        </div>\r\n      )}\r\n      <iframe\r\n        className={cx('contact-iframe', { hidden: loading })}\r\n        src={contactForm}\r\n        title=\"Contact Me\"\r\n        onLoad={() => setLoading(false)}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport {\r\n  Navbar,\r\n  NavbarGroup,\r\n  NavbarHeading,\r\n  NavbarDivider,\r\n  Tabs,\r\n  Tab\r\n} from '@blueprintjs/core';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { routes, AppRoute } from '../../constants/routes';\r\nimport '../../styles/components/Navigation/TopBar.scss';\r\n\r\nconst TopBarBase: React.FC<RouteComponentProps> = props => {\r\n  let active: AppRoute;\r\n  if (props.location.pathname.startsWith(routes.app.contact.base)) {\r\n    active = AppRoute.Contact;\r\n  } else {\r\n    active = AppRoute.Home;\r\n  }\r\n  return (\r\n    <Navbar className=\"top-bar bp3-dark\">\r\n      <NavbarGroup>\r\n        <NavbarHeading>Nathan Smith</NavbarHeading>\r\n        <NavbarDivider />\r\n        <Tabs\r\n          selectedTabId={active}\r\n          onChange={(route: string) => props.history.push(route)}\r\n        >\r\n          <Tab id={AppRoute.Home} title=\"Home\" />\r\n          <Tab id={AppRoute.Contact} title=\"Contact\" />\r\n        </Tabs>\r\n      </NavbarGroup>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport const TopBar = withRouter(TopBarBase);\r\n","import * as React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { routes } from '../../constants/routes';\r\nimport { Home } from '../Home';\r\nimport { Contact } from '../Contact';\r\nimport { TopBar } from './TopBar';\r\nimport '../../styles/components/Navigation/Router.scss';\r\n\r\nexport const Router: React.FC = props => (\r\n  <>\r\n    <TopBar />\r\n    <div className=\"router-wrapper\">\r\n      <Switch>\r\n        <Route path={routes.app.contact.base} component={Contact} />\r\n        <Route path={routes.app.home.base} component={Home} />\r\n      </Switch>\r\n    </div>\r\n  </>\r\n);\r\n","import * as React from 'react';\r\nimport { Router } from '../Navigation/AppRouter';\r\n\r\nexport const App: React.FC = props => (\r\n  <>\r\n    <Router />\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","import * as React from 'react';\r\n\r\nexport const DndTools: React.FC = props => <div>DndTools</div>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Router } from './components/Navigation/RootRouter';\r\nimport 'normalize.css';\r\nimport '@blueprintjs/core/lib/css/blueprint.css';\r\n\r\nReactDOM.render(<Router />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { routes } from '../../constants/routes';\r\nimport { App } from '../RootComponents/App';\r\nimport { DndTools } from '../RootComponents/DndTools';\r\n\r\nexport const Router: React.FC = props => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path={routes.dndTools.root} component={DndTools} />\r\n      <Route path={routes.app.root} component={App} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n"],"sourceRoot":""}