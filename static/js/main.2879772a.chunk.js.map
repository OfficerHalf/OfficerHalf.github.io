{"version":3,"sources":["Constants.ts","Components/Logo/Logo.tsx","Components/Navbar/Navbar.tsx","Components/Home/ProjectsSection/ProjectCard/ProjectCard.tsx","Components/Home/ProjectsSection/ProjectsSection.tsx","Components/Home/AboutSection/AboutSection.tsx","Components/Home/ContactSection/ContactSection.tsx","Sudoku/Models/CellNote.ts","Sudoku/Models/Cell.ts","Sudoku/Models/Coordinate.ts","Sudoku/Models/CellGroup.ts","Sudoku/Models/CellCollection.ts","Providers/ButterCmsProvider.ts","Components/Home/Home.tsx","Components/App.tsx","serviceWorker.js","index.tsx"],"names":["Colors","blue","dark","darkGray","fuschia","green","light","lightGray","orange","purple","Logo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","color","react_default","a","createElement","className","id","version","viewBox","height","width","transform","d","mask","style","fill","strokeWidth","Component","Navbar","Logo_Logo_Logo","ProjectCard","dangerouslySetInnerHTML","__html","project","description","name","status","src","icon","alt","href","more","ProjectsSection","getProjects","cards","projects","forEach","key","slugify","push","ProjectCard_ProjectCard_ProjectCard","AboutSection","ContactSection","CellNote","values","Set","createClass","value","has","delete","add","Array","from","Cell","note","editable","valid","undefined","allCells","position","sector","row","column","cells","Coordinate","col","CellGroup","foundCells","cell","existing","BOARD_SIZE","CellCollection","boardString","size","arguments","length","sectors","rows","cols","sectorDimensions","getSectorDimensions","transformBoard","r","c","i","j","getSectorIndex","init","markAllCellsValid","validate","sqrt","Math","floor","factors","middle","ceil","input","generateEmptyBoard","output","parseInt","ButterCmsProvider","awBeans","butter","Butter","content","retrieve","then","resp","data","Home","butterProvider","state","collection","console","log","Navbar_Navbar_Navbar","AboutSection_AboutSection","ProjectsSection_ProjectsSection","ContactSection_ContactSection","_this2","setState","About","Users","App","Switch","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","Components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2879772a.chunk.js","sourcesContent":["// Same colors defined in Global.scss\r\nexport const Colors = {\r\n    blue: '#97e0ef',\r\n    dark: '#282828',\r\n    darkGray: '#424242',\r\n    fuschia: '#f95793',\r\n    green: '#b5e25a',\r\n    light: '#f7f7f7',\r\n    lightGray: '#757575i',\r\n    orange: '#fcac50',\r\n    purple: '#ceb5ff'\r\n};\r\n","import React, { Component } from 'react';\r\nimport './Logo.scss';\r\nimport { Colors } from '../../Constants';\r\n\r\ninterface LogoProps {\r\n    color?: string;\r\n}\r\n\r\nexport default class Logo extends Component<LogoProps, {}> {\r\n    private color: string;\r\n    constructor(props: LogoProps) {\r\n        super(props);\r\n        this.color = props.color ? props.color : Colors.dark;\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <span className=\"LogoComponent\">\r\n                <svg\r\n                   id=\"svg8\"\r\n                   version=\"1.1\"\r\n                   viewBox=\"0 0 89.582123 15.323603\"\r\n                   height=\"15.323603mm\"\r\n                   width=\"89.582123mm\">\r\n                  <defs\r\n                     id=\"defs2\" />\r\n                  <metadata id=\"metadata5\">\r\n                  </metadata>\r\n                  <g\r\n                     transform=\"translate(-28.587403,-259.18676)\"\r\n                     id=\"layer1\">\r\n                    <path\r\n                       id=\"rect3731\"\r\n                       transform=\"scale(0.26458333)\"\r\n                       d=\"m 108.04688,979.60352 v 57.91598 H 300.59961 446.625 v -5 -47.91598 -5 H 300.59961 Z m 192.55273,5 H 441.625 v 47.91598 H 300.59961 Z m 14.875,4.47851 c -3.24653,0 -5.87674,0.97158 -7.89063,2.91602 -1.99652,1.94444 -2.99609,4.41838 -2.99609,7.42187 0,1.73608 0.34852,3.28258 1.04297,4.63668 0.7118,1.3369 1.76953,2.5348 3.17578,3.5938 1.42361,1.0417 3.47287,2.0393 6.14648,2.9941 2.67362,0.9549 4.52257,1.9364 5.54688,2.9434 1.0243,1.0069 1.53711,2.4553 1.53711,4.3476 0,1.8577 -0.53082,3.326 -1.58984,4.4024 -1.05903,1.0764 -2.63759,1.6133 -4.73829,1.6133 -2.25694,0 -4.04578,-0.6511 -5.36523,-1.9532 -1.30208,-1.302 -1.95313,-3.1249 -1.95313,-5.4687 h -4.79101 c 0,2.257 0.52886,4.2621 1.58789,6.0156 1.07639,1.7361 2.54275,3.0903 4.40039,4.0625 1.875,0.9549 3.91623,1.4336 6.12109,1.4336 3.4375,0 6.15387,-0.9214 8.1504,-2.7617 1.99652,-1.8576 2.99414,-4.3216 2.99414,-7.3945 0,-2.9167 -0.8073,-5.2785 -2.42188,-7.084 -1.59722,-1.8056 -4.2615,-3.324 -7.99414,-4.5567 -2.39583,-0.8507 -4.16667,-1.8142 -5.3125,-2.8906 -1.14583,-1.0764 -1.71875,-2.4145 -1.71875,-4.0117 0,-1.94444 0.52886,-3.45484 1.58789,-4.53125 1.05903,-1.07639 2.55339,-1.61328 4.48047,-1.61328 2.11805,0 3.74067,0.64104 4.86914,1.92578 1.12847,1.28471 1.69336,3.0996 1.69336,5.44335 h 4.79101 c 10e-6,-2.11807 -0.46875,-4.06314 -1.40624,-5.83398 -0.93751,-1.77083 -2.27366,-3.15104 -4.00977,-4.14062 -1.73611,-1.00694 -3.71528,-1.50977 -5.9375,-1.50977 z m -202.42773,0.52149 h 7.65624 l 11.22461,24.89448 v -24.89448 h 7.62891 v 37.91598 h -7.65625 l -11.19727,-24.8691 v 24.8691 h -7.65624 z m 42.60351,0 h 7.00586 l 11.92773,37.91598 h -8.17773 l -2.03125,-7.7597 h -10.44336 l -2.03125,7.7597 h -8.09766 z m 17.65625,0 h 26.27734 v 6.3789 h -9.375 v 31.53708 h -7.68359 v -31.53708 h -9.21875 z m 30.67774,0 h 7.65624 v 15.33788 h 11.30274 v -15.33788 h 7.62891 v 37.91598 h -7.62891 v -16.2246 h -11.30274 v 16.2246 h -7.65624 z m 42.60351,0 h 7.00586 l 11.92773,37.91598 h -8.17773 l -2.03125,-7.7597 h -10.44336 l -2.03125,7.7597 h -8.09766 z m 22.5,0 h 7.65625 l 11.22461,24.89448 v -24.89448 h 7.63086 v 37.91598 h -7.65625 l -11.19922,-24.8691 v 24.8691 h -7.65625 z m 63.99023,0 v 37.91598 h 4.76563 v -14.7656 l -0.44336,-14.68749 9.87109,29.45309 h 3.64454 l 9.92187,-29.55661 -0.44141,14.79101 v 14.7656 h 4.76563 v -37.91598 h -6.14649 l -9.89648,30.93748 -9.89453,-30.93748 z m 40.52149,0 v 37.91598 h 4.76562 v -37.91598 z m 9.86914,0 v 4.11328 h 9.94727 v 33.8027 h 4.76562 v -33.8027 h 9.97461 v -4.11328 z m 30.33789,0 v 37.91598 h 4.76563 v -17.5254 h 15.26171 v 17.5254 h 4.79102 v -37.91598 h -4.79102 v 16.30078 h -15.26171 v -16.30078 z m -254.66602,10.25976 -3.54101,13.51562 h 7.08203 z m 90.9375,0 -3.54101,13.51562 h 7.08203 z\"\r\n                       mask=\"none\"\r\n                       style={{fill: this.color, strokeWidth: 1.08134818}}/>\r\n                  </g>\r\n                </svg>\r\n            </span>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Logo from '../Logo/Logo';\r\nimport './Navbar.scss';\r\nimport { Colors } from '../../Constants';\r\n\r\nexport default class Navbar extends Component {\r\n    public render() {\r\n        return (\r\n            <nav className=\"NavbarComponent\">\r\n                <Logo color={Colors.light}/>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Project } from '../../../../Models/Project';\r\nimport './ProjectCard.scss';\r\n\r\ninterface ProjectCardProps {\r\n    project: Project;\r\n}\r\n\r\nexport default class ProjectCard extends Component<ProjectCardProps, {}> {\r\n    public render() {\r\n        return (\r\n            <div className=\"ProjectCardComponent\">\r\n                <div dangerouslySetInnerHTML={{__html: this.props.project.description}}/>\r\n                <div>{this.props.project.name}</div>\r\n                <div>{this.props.project.status}</div>\r\n                <img className=\"projectIcon\" src={this.props.project.icon} alt=\"\"/>\r\n                <a href={this.props.project.more}>More Info</a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Project } from '../../../Models/Project';\r\nimport ProjectCard from './ProjectCard/ProjectCard';\r\nimport slugify from 'slugify';\r\n\r\ninterface ProjectsSectionProps {\r\n    projects: Project[];\r\n}\r\n\r\nexport default class ProjectsSection extends Component<ProjectsSectionProps, {}> {\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>projects</h1>\r\n                <div>{this.getProjects()}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private getProjects(): JSX.Element[] {\r\n        const cards: JSX.Element[] = [];\r\n        this.props.projects.forEach(project => {\r\n            const key = slugify(project.name);\r\n            cards.push(<ProjectCard key={key} project={project}/>);\r\n        });\r\n        return cards;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class AboutSection extends Component {\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>about</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ContactSection extends Component {\r\n    public render() {\r\n        return (\r\n            <div>\r\n                <h1>contact</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export class CellNote {\r\n    public values: Set<number>;\r\n    constructor() {\r\n        this.values = new Set();\r\n    }\r\n\r\n    public update(value: number): void {\r\n        if (this.values.has(value)) {\r\n            this.values.delete(value);\r\n        } else {\r\n            this.values.add(value);\r\n        }\r\n    }\r\n\r\n    public clear(): void {\r\n        this.values = new Set();\r\n    }\r\n\r\n    public asArray(): number[] {\r\n        return Array.from(this.values);\r\n    }\r\n}\r\n","import { CellGroup } from './CellGroup';\r\nimport { CellNote } from './CellNote';\r\nimport { Coordinate } from './Coordinate';\r\nimport { CellCollection } from './CellCollection';\r\n\r\nexport class Cell {\r\n    public allCells!: CellCollection;\r\n    public position!: Coordinate;\r\n    public sector!: CellGroup;\r\n    public row!: CellGroup;\r\n    public column!: CellGroup;\r\n    public value: number;\r\n    public note: CellNote;\r\n    public editable: boolean;\r\n    public valid: boolean;\r\n\r\n    public constructor(value?: number, note?: CellNote, editable?: boolean, valid?: boolean) {\r\n        this.value = value ? value : 0;\r\n        this.note = note ? note : new CellNote();\r\n        this.editable = editable !== undefined ? editable : true;\r\n        this.valid = valid !== undefined ? valid : true;\r\n    }\r\n\r\n    public init(allCells: CellCollection, position: Coordinate, sector: CellGroup, row: CellGroup, column: CellGroup) {\r\n        this.allCells = allCells;\r\n        this.position = position;\r\n        sector.cells.push(this);\r\n        row.cells.push(this);\r\n        column.cells.push(this);\r\n        this.sector = sector;\r\n        this.row = row;\r\n        this.column = column;\r\n    }\r\n}\r\n","export class Coordinate {\r\n    public readonly row: number;\r\n    public readonly col: number;\r\n    constructor(row: number, col: number) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n}\r\n","import { Cell } from './Cell';\r\n\r\nexport class CellGroup {\r\n    public cells: Cell[];\r\n\r\n    constructor(cells?: Cell[]) {\r\n        cells ? this.cells = cells : this.cells = [];\r\n    }\r\n\r\n    public validate(): boolean {\r\n        const foundCells: any = {};\r\n        let valid = true;\r\n        this.cells.forEach(cell => {\r\n            if (foundCells[cell.value]) {\r\n                const existing = foundCells[cell.value] as Cell;\r\n                if (existing.editable) {\r\n                    existing.valid = false;\r\n                }\r\n                if (cell.editable) {\r\n                    cell.valid = false;\r\n                }\r\n                valid = false;\r\n            } else {\r\n                foundCells[cell.value] = cell;\r\n            }\r\n        });\r\n        return valid;\r\n    }\r\n    public contains(value: number): boolean {\r\n        this.cells.forEach(cell => {\r\n            if (cell.value === value) {\r\n                return true;\r\n            }\r\n        });\r\n        return false;\r\n    }\r\n}\r\n","import { Cell } from './Cell';\r\nimport { Coordinate } from './Coordinate';\r\nimport { CellNote } from './CellNote';\r\nimport { CellGroup } from './CellGroup';\r\n\r\nconst BOARD_SIZE = 9; // will be able to change this later. Should work with any non-prime number;\r\n\r\n// Represents a single sudoku game.\r\nexport class CellCollection {\r\n    public cells: Cell[][];\r\n    public sectors: CellGroup[] = [];\r\n    public rows: CellGroup[] = [];\r\n    public cols: CellGroup[] = [];\r\n    public size: number;\r\n    private sectorDimensions: Coordinate;\r\n\r\n    constructor(boardString?: string, size: number = BOARD_SIZE) {\r\n        this.size = size;\r\n\r\n        // Get sector dimensions\r\n        this.sectorDimensions = this.getSectorDimensions(size);\r\n\r\n        // transform string board into 2d array of cells\r\n        this.cells = boardString ? this.transformBoard(boardString, size) : this.transformBoard('', size);\r\n\r\n        // Create the cells\r\n        for (let r = 0; r < size; r++) {\r\n            const column: Cell[] = [];\r\n            for (let c = 0; c < size; c++) {\r\n                column.push(new Cell());\r\n            }\r\n        }\r\n\r\n        // Add empty sectors\r\n        for (let i = 0; i < size; i++) {\r\n            const sector = new CellGroup();\r\n            this.sectors.push(sector);\r\n        }\r\n\r\n        // Get rows + columns + sectors\r\n        for (let i = 0; i < size; i++) {\r\n            const row = new CellGroup();\r\n            const col = new CellGroup();\r\n            for (let j = 0; j < size; j++) {\r\n                row.cells.push(this.cells[i][j]);\r\n                col.cells.push(this.cells[j][i]);\r\n\r\n                this.sectors[this.getSectorIndex(i, j)].cells.push(this.cells[i][j]);\r\n            }\r\n            this.rows.push(row);\r\n            this.cols.push(col);\r\n        }\r\n\r\n        // init the cells\r\n        for (let row = 0; row < size; row++) {\r\n            for (let col = 0; col < size; col++) {\r\n                this.cells[row][col].init(this, new Coordinate(row, col), this.sectors[this.getSectorIndex(row, col)], this.rows[row], this.cols[col]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public updateCell(row: number, col: number, value: number) {\r\n        const cell = this.cells[row][col];\r\n        if (cell && cell.editable && cell.value !== value) {\r\n            this.markAllCellsValid();\r\n            cell.value = value;\r\n            this.validate();\r\n        }\r\n    }\r\n\r\n    public validate() {\r\n        for (let i = 0; i < this.size; i++) {\r\n            this.rows[i].validate();\r\n            this.cols[i].validate();\r\n            this.sectors[i].validate();\r\n        }\r\n    }\r\n\r\n    public markAllCellsValid(): void {\r\n        this.cells.forEach((row) => {\r\n            row.forEach((cell) => {\r\n                cell.valid = true;\r\n            });\r\n        });\r\n    }\r\n\r\n    public isCompleted(): boolean {\r\n        this.cells.forEach((row) => {\r\n            row.forEach((cell) => {\r\n                if (cell.value === 0 || !cell.valid) {\r\n                    return false;\r\n                }\r\n            });\r\n        });\r\n        return true;\r\n    }\r\n\r\n    private getSectorDimensions(size: number): Coordinate {\r\n        // If the number has a whole square root, use that\r\n        const sqrt = Math.sqrt(size);\r\n        if (Math.floor(sqrt) === sqrt) {\r\n            return new Coordinate(sqrt, sqrt);\r\n        }\r\n\r\n        // Find all factors of given number; WARNING: don't do this with arbitrarily large values.\r\n        const factors: number[] = [1];\r\n        for (let i = 2; i <= size; i++) {\r\n            if (size % i === 0) {\r\n                factors.push(i);\r\n            }\r\n        }\r\n        const middle = factors.length - 1;\r\n        const rows = factors[Math.floor(middle)];\r\n        const cols = factors[Math.ceil(middle)];\r\n        return new Coordinate(rows, cols);\r\n    }\r\n\r\n    private getSectorIndex(row: number, col: number): number {\r\n        // Sector\r\n        // Math: ex, 9 sectors, 3x3.\r\n        // Floor(col / 3) * 3 + Floor(row / 3) = sector index\r\n        return (Math.floor(col / this.sectorDimensions.col) * this.sectorDimensions.col) + (Math.floor(row / this.sectorDimensions.row));\r\n    }\r\n\r\n    private transformBoard(input: string, size: number): Cell[][] {\r\n        if (input.length === 0 || input.length !== (size * size)) {\r\n            return this.generateEmptyBoard(size);\r\n        }\r\n        // iterate through every number in the input. split them into rows and columns.\r\n        const output: Cell[][] = [];\r\n        for (let i = 0, row = 0, col = 0; i < input.length; i++) {\r\n            const value = parseInt(input[i]);\r\n            if (col === 0) {\r\n                output[row] = [];\r\n            }\r\n            // Create a new cell with this value, empty note. If value === 0, it's editable.\r\n            output[row][col] = new Cell(value, new CellNote(), value === 0);\r\n            col++;\r\n            if (col === size) {\r\n                row++;\r\n                col = 0;\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    private generateEmptyBoard(size: number): Cell[][] {\r\n        const row: Cell[] = [];\r\n        const output: Cell[][] = [];\r\n        for (let i = 0; i < size; i++) {\r\n            row.push(new Cell(0));\r\n        }\r\n        for (let i = 0; i < size; i++) {\r\n            output.push(row);\r\n        }\r\n        return output;\r\n    }\r\n}\r\n","import Butter from 'buttercms';\r\nimport { Project } from '../Models/Project';\r\n\r\nexport default class ButterCmsProvider {\r\n    private readonly awBeans: string = '9ffd3dad4fd54423ad22bc3ce3e1a2fd6bbc9081'; // This is READ ONLY. Named awBeans to stop scraping bots from grabbing it.\r\n    private readonly butter = Butter(this.awBeans);\r\n    public getProjects(): Promise<Project[]> {\r\n        return this.butter.content.retrieve(['project']).then(resp => {\r\n            return resp.data.data.project;\r\n        });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport Projects from './ProjectsSection/ProjectsSection';\r\nimport About from './AboutSection/AboutSection';\r\nimport Contact from './ContactSection/ContactSection';\r\nimport './Home.scss';\r\nimport { CellCollection } from '../../Sudoku/Models/CellCollection';\r\nimport ButterCmsProvider from '../../Providers/ButterCmsProvider';\r\nimport { Project } from '../../Models/Project';\r\n\r\nconst testBoard: string = '530070000600195000098000060800060003400803001700020006060000280000419005000080079';\r\n\r\ninterface HomeState {\r\n    projects: Project[];\r\n}\r\n\r\nexport default class Home extends Component<{}, HomeState> {\r\n    private butterProvider: ButterCmsProvider = new ButterCmsProvider();\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            projects: []\r\n        };\r\n    }\r\n    public render() {\r\n        const collection = new CellCollection(testBoard, 9);\r\n        console.log(collection);\r\n        return (\r\n            <div className=\"HomeComponent\">\r\n                <Navbar/>\r\n                <About/>\r\n                <Projects projects={this.state.projects}/>\r\n                <Contact/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.butterProvider.getProjects().then(projects => {\r\n            this.setState({projects});\r\n        });\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Home from './Home/Home';\r\n\r\nconst About = () => <h2>About</h2>;\r\nconst Users = () => <h2>Users</h2>;\r\n\r\nclass App extends Component {\r\n  public render() {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/\" exact={true} component={Home}/>\r\n        <Route path=\"/about/\" component={About}/>\r\n        <Route path=\"/users/\" component={Users}/>\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './Components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './Global.scss';\r\n\r\nReactDOM.render((\r\n    <HashRouter>\r\n        <App/>\r\n    </HashRouter>\r\n), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}