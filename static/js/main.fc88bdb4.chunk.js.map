{"version":3,"sources":["serviceWorker.ts","constants/routes.ts","components/Project.tsx","constants/strings.ts","components/Contact.tsx","components/Navigation/StickyNavButton.tsx","components/Navigation/StickyNav.tsx","components/Home/Home.tsx","components/RootComponents/404.tsx","components/Navigation/AppRouter.tsx","components/RootComponents/App.tsx","components/RootComponents/DndTools.tsx","index.tsx","components/Navigation/RootRouter.tsx"],"names":["Boolean","window","location","hostname","match","AppRoute","routes","root","home","base","contact","Project","props","react","className","title","description","href","link","target","rel","projects","Contact","_React$useState","React","_React$useState2","Object","slicedToArray","loading","setLoading","spinner","cx","hidden","src","onLoad","StickyNavButton","onClick","style","listStyle","display","children","viewBox","width","cy","r","StickyNav","withRouter","StickyNavButton_StickyNavButton","active","scrollToHome","scrollToContact","Home","homeRef","contactRef","useScrollTo","StickyNav_StickyNav","ref","map","project","Project_Project","assign","key","Contact_Contact","FourZeroFour","id","nonIdealState","icon","action","buttons","intent","history","push","Router","react_router","exact","path","component","App","AppRouter_Router","DndTools","ReactDOM","render","react_default","a","createElement","react_router_dom","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc88bdb4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const routes = {\r\n  app: {\r\n    root: '/',\r\n    home: {\r\n      base: '/'\r\n    },\r\n    contact: {\r\n      base: '/contact'\r\n    }\r\n  },\r\n  dndTools: {\r\n    root: '/dnd'\r\n  }\r\n};\r\n\r\nexport enum AppRoute {\r\n  Home = '/',\r\n  Contact = '/contact'\r\n}\r\n","import * as React from 'react';\r\nimport '../styles/components/Project.scss';\r\n\r\nexport interface ProjectProps {\r\n  title: string;\r\n  description: string;\r\n  link: string;\r\n}\r\n\r\nexport const Project: React.FC<ProjectProps> = props => {\r\n  return (\r\n    <div className=\"project\">\r\n      <h3 className=\"project-title\">{props.title}</h3>\r\n      <p className=\"project-description\">{props.description}</p>\r\n      <a\r\n        className=\"project-more-link\"\r\n        href={props.link}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        See more\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n","import { ProjectProps } from '../components/Project';\r\n\r\nexport const contactForm =\r\n  'https://docs.google.com/forms/d/e/1FAIpQLScLKJVojwvtY0TpBPYfaUQEhKjQfa2iAZsitp3iRxkEoAYvmw/viewform?embedded=true';\r\n\r\nexport const projects: ProjectProps[] = [\r\n  {\r\n    title: 'Homebrewery Markdown Preview',\r\n    description:\r\n      'An extension for Visual Studio Code that formats the markdown preview in the same manner as the Homebrewery',\r\n    link:\r\n      'https://marketplace.visualstudio.com/items?itemName=officerhalf.homebrewery-vscode'\r\n  },\r\n  {\r\n    title: 'Alloy Theme',\r\n    description:\r\n      'A more monochromatic, desaturated Monokai theme for Visual Studio Code, PrismJS, and Conemu.',\r\n    link:\r\n      'https://marketplace.visualstudio.com/items?itemName=officerhalf.alloy-theme'\r\n  },\r\n  {\r\n    title: \"The Captain's Hooks\",\r\n    description: 'A collection of useful React utility hooks.',\r\n    link: 'https://www.npmjs.com/package/the-captains-hooks'\r\n  }\r\n];\r\n","import * as React from 'react';\r\nimport cx from 'classnames';\r\nimport { Spinner } from '@blueprintjs/core';\r\nimport '../styles/components/Contact.scss';\r\nimport { contactForm } from '../constants/strings';\r\n\r\nexport const Contact: React.FC = props => {\r\n  const [loading, setLoading] = React.useState<boolean>(true);\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div className=\"contact-spinner-wrapper\">\r\n          <Spinner className=\"contact-spinner\" />\r\n        </div>\r\n      )}\r\n      <iframe\r\n        className={cx('contact-iframe', { hidden: loading })}\r\n        src={contactForm}\r\n        title=\"Contact Me\"\r\n        onLoad={() => setLoading(false)}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import * as React from 'react';\r\n\r\ninterface StickyNavButtonProps {\r\n  onClick: (e: React.MouseEvent) => void;\r\n  active: boolean;\r\n}\r\n\r\nexport const StickyNavButton: React.FC<StickyNavButtonProps> = props => (\r\n  <li onClick={props.onClick} style={{ listStyle: 'none', display: 'flex' }}>\r\n    {props.children}\r\n    <svg viewBox=\"0 0 100 100\" width=\"50px\">\r\n      <circle cx=\"50\" cy=\"50\" r=\"50\" />\r\n    </svg>\r\n  </li>\r\n);\r\n","import * as React from 'react';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { StickyNavButton } from './StickyNavButton';\r\nimport '../../styles/components/Navigation/StickyNav.scss';\r\n\r\ninterface StickyNavProps {\r\n  scrollToHome: () => void;\r\n  scrollToContact: () => void;\r\n}\r\n\r\nconst StickyNavBase: React.FC<StickyNavProps & RouteComponentProps> = props => {\r\n  return (\r\n    <nav className=\"sticky-nav bp3-dark\">\r\n      <ul>\r\n        <StickyNavButton active={false} onClick={props.scrollToHome}>\r\n          Home\r\n        </StickyNavButton>\r\n        <StickyNavButton active={false} onClick={props.scrollToContact}>\r\n          Contact\r\n        </StickyNavButton>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport const StickyNav = withRouter(StickyNavBase);\r\n","import * as React from 'react';\r\nimport { Project } from '../Project';\r\nimport { projects } from '../../constants/strings';\r\nimport { Contact } from '../Contact';\r\nimport '../../styles/components/Home/Home.scss';\r\nimport { StickyNav } from '../Navigation/StickyNav';\r\nimport { useScrollTo } from 'the-captains-hooks';\r\n\r\nexport const Home: React.FC = props => {\r\n  const homeRef = React.useRef<HTMLDivElement>(null);\r\n  const contactRef = React.useRef<HTMLDivElement>(null);\r\n  const scrollToHome = useScrollTo<HTMLDivElement>(homeRef);\r\n  const scrollToContact = useScrollTo<HTMLDivElement>(contactRef);\r\n\r\n  return (\r\n    <>\r\n      <StickyNav\r\n        scrollToHome={scrollToHome}\r\n        scrollToContact={scrollToContact}\r\n      />\r\n      <div className=\"home-wrapper\" ref={homeRef}>\r\n        <div className=\"home-section\">\r\n          <div className=\"home-section-inner\">\r\n            <h2>About</h2>\r\n            <p>\r\n              Nathan Smith is an Associate Software Developer at Bentley Systems\r\n              where he writes full-stack enterprise ASP.NET Core and TypeScript\r\n              + React web applications and maintains a CSS + React UI library.\r\n              In his spare time he plays tabletop and video games and takes\r\n              pictures of his cats.\r\n            </p>\r\n          </div>\r\n          <div className=\"home-section-inner home-section-inner-projects\">\r\n            <h2>Projects</h2>\r\n            {projects.map(project => (\r\n              <Project {...project} key={project.title} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div className=\"home-section\" ref={contactRef}>\r\n          <Contact />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { NonIdealState, Button } from '@blueprintjs/core';\r\nimport { routes } from '../../constants/routes';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport '../../styles/components/RootComponents/404.scss';\r\n\r\nconst FourZeroFourBase: React.FC<RouteComponentProps> = props => (\r\n  <div id=\"not-found\">\r\n    <NonIdealState\r\n      icon=\"zoom-out\"\r\n      title=\"Not Found\"\r\n      description=\"Something went wrong or there was nothing here to begin with.\"\r\n      action={\r\n        <Button\r\n          icon=\"home\"\r\n          intent=\"primary\"\r\n          onClick={() => props.history.push(routes.app.home.base)}\r\n        >\r\n          Return Home\r\n        </Button>\r\n      }\r\n    />\r\n  </div>\r\n);\r\n\r\nexport const FourZeroFour = withRouter(FourZeroFourBase);\r\n","import * as React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { routes } from '../../constants/routes';\r\nimport { StickyNav } from './StickyNav';\r\nimport { Home } from '../Home/Home';\r\nimport { Contact } from '../Contact';\r\nimport { FourZeroFour } from '../RootComponents/404';\r\n\r\nexport const Router: React.FC = props => (\r\n  <>\r\n    <Switch>\r\n      <Route exact path={routes.app.contact.base} component={Contact} />\r\n      <Route exact path={routes.app.home.base} component={Home} />\r\n      <Route component={FourZeroFour} />\r\n    </Switch>\r\n  </>\r\n);\r\n","import * as React from 'react';\r\nimport { Router } from '../Navigation/AppRouter';\r\n\r\nexport const App: React.FC = props => (\r\n  <>\r\n    <Router />\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","import * as React from 'react';\r\n\r\nexport const DndTools: React.FC = props => <div>DndTools</div>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Router } from './components/Navigation/RootRouter';\r\nimport 'normalize.css';\r\nimport './styles/index.scss';\r\n\r\nReactDOM.render(<Router />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import * as React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport { routes } from '../../constants/routes';\r\nimport { App } from '../RootComponents/App';\r\nimport { DndTools } from '../RootComponents/DndTools';\r\n\r\nexport const Router: React.FC = props => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route path={routes.dndTools.root} component={DndTools} />\r\n      <Route path={routes.app.root} component={App} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n"],"sourceRoot":""}